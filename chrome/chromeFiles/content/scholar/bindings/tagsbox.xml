<?xml version="1.0"?>
<!--
	Scholar
	Copyright (C) 2006   Center for History and New Media, George Mason University, Fairfax, VA
	http://chnm.gmu.edu/
	
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->
<bindings 	xmlns="http://www.mozilla.org/xbl"
			xmlns:xbl="http://www.mozilla.org/xbl"
			xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="tags-box">
		<implementation>
			<field name="itemRef"/>
			<property name="item" onget="return this.itemRef;">
				<setter>
					<![CDATA[
						this.itemRef = val;
						this.reload();
					]]>
				</setter>
			</property>
			<property name="summary">
				<getter>
					<![CDATA[
						var r = "";
					
						if(this.item)
						{
							var tags = this.item.getTags();
							if(tags)
							{
								for(var i = 0; i < tags.length; i++)
								{
									r = r + tags[i] + ", ";
								}
								r = r.substr(0,r.length-2);
							}
						}
					
						return r;
					]]>
				</getter>
			</property>
			<method name="reload">
				<body>
					<![CDATA[
						var rows = this.id('tagRows');
						while(rows.hasChildNodes())
							rows.removeChild(rows.firstChild);
						
						if(this.item)
						{
							var tags = this.item.getTags();
							
							if(tags)
							{
								for(var i = 0; i < tags.length; i++)
								{
									var id = Scholar.Tags.getID(tags[i]);
									
									var icon= document.createElement("image");
									icon.setAttribute('src','chrome://scholar/skin/tag.png');
							
									var label = document.createElement("label");
									label.setAttribute('value', tags[i]);
									label.setAttribute('crop','end');
								
									var remove = document.createElement("label");
									remove.setAttribute('value','-');
									remove.setAttribute('onclick',"this.parentNode.parentNode.parentNode.parentNode.parentNode.remove('"+id+"');");
									remove.setAttribute('class','clicky');
							
									var row = document.createElement("row");
									row.appendChild(icon);
									row.appendChild(label);
									row.appendChild(remove);
									row.setAttribute('id','tag-'+id);
							
									rows.appendChild(row);		
								}
								this.updateCount(tags.length);
							}
							else
							{
								this.updateCount();
							}
						}
					]]>
				</body>
			</method>
			<method name="add">
				<body>
					<![CDATA[
						var t = prompt('Add Tag:');
						if(t && this.item)
						{
							this.item.addTag(t);
						}
					]]>
				</body>
			</method>
			<method name="remove">
				<parameter name="id"/>
				<body>
					<![CDATA[
						if(id)
						{
							this.item.removeTag(id);
							var rows = this.id('tagRows');
							rows.removeChild(this.id('tag-'+id));
							this.updateCount();
						}
					]]>
				</body>
			</method>
			<method name="updateCount">
				<parameter name="count"/>
				<body>
					<![CDATA[
						if(count == null)
						{
							tags = this.item.getTags();
							if(tags)
								count = tags.length;
							else
								count = 0;
						}
						
						this.id('tagsNum').value = count + ' tags:';
					]]>
				</body>
			</method>
			<method name="id">
				<parameter name="id"/>
				<body>
					<![CDATA[
						return document.getAnonymousNodes(this)[0].getElementsByAttribute('id',id)[0];
					]]>
				</body>
			</method>
		</implementation>
		<content>
			<xul:vbox xbl:inherits="flex">
				<xul:hbox align="center">
					<xul:label id="tagsNum"/>
					<xul:button label="Add" oncommand="this.parentNode.parentNode.parentNode.add();"/>
				</xul:hbox>
				<xul:grid>
					<xul:columns>
						<xul:column/>
						<xul:column flex="1"/>
						<xul:column/>
					</xul:columns>
					<xul:rows id="tagRows"/>
				</xul:grid>
			</xul:vbox>
		</content>
	</binding>
</bindings>